version: '3.8'

services:
  # PostgreSQL with performance tuning for large datasets
  postgres:
    image: postgres:16-alpine
    container_name: yaci-postgres
    environment:
      POSTGRES_DB: yaci
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      # Performance tuning for large datasets
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    command:
      - postgres
      # Connection pooling settings
      - -c
      - max_connections=200
      # Memory settings (adjust based on available RAM)
      - -c
      - shared_buffers=2GB
      - -c
      - effective_cache_size=6GB
      - -c
      - maintenance_work_mem=512MB
      - -c
      - work_mem=32MB
      # Checkpoint settings for write performance
      - -c
      - checkpoint_completion_target=0.9
      - -c
      - wal_buffers=16MB
      - -c
      - default_statistics_target=100
      - -c
      - random_page_cost=1.1
      # Parallel query execution
      - -c
      - max_parallel_workers_per_gather=4
      - -c
      - max_parallel_workers=8
      - -c
      - max_parallel_maintenance_workers=4
      # Enable JIT compilation for complex queries
      - -c
      - jit=on
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PostgREST with connection pooling
  postgrest:
    image: postgrest/postgrest:v12.0.2
    container_name: yaci-postgrest
    environment:
      PGRST_DB_URI: postgres://postgres:${POSTGRES_PASSWORD:-changeme}@postgres:5432/yaci
      PGRST_DB_SCHEMA: api
      PGRST_DB_ANON_ROLE: web_anon
      # Connection pool settings for high load
      PGRST_DB_POOL: 100
      PGRST_DB_POOL_ACQUISITION_TIMEOUT: 10
      PGRST_MAX_ROWS: 10000
      # Enable response compression
      PGRST_SERVER_CORS_ALLOWED_ORIGINS: "*"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3010:3000"
    restart: unless-stopped

  # Redis for caching frequently accessed data
  redis:
    image: redis:7-alpine
    container_name: yaci-redis
    command:
      - redis-server
      - --maxmemory
      - 2gb
      - --maxmemory-policy
      - allkeys-lru
      - --save
      - ""
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Yaci extractor with optimized settings
  yaci-extractor:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: yaci-extractor
    environment:
      # Database connection with connection pooling
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-changeme}@postgres:5432/yaci?pool_max_conns=25&pool_min_conns=5
      # gRPC settings with keepalive for persistent connections
      GRPC_ENDPOINT: ${GRPC_ENDPOINT}
      GRPC_KEEPALIVE_TIME: 30s
      GRPC_KEEPALIVE_TIMEOUT: 10s
      # Prometheus endpoint if available
      PROMETHEUS_ENDPOINT: ${PROMETHEUS_ENDPOINT:-}
      # Performance settings
      YACI_BATCH_SIZE: 100
      YACI_WORKERS: 8
      YACI_BUFFER_SIZE: 1000
      # Cache settings
      YACI_CACHE_ENABLED: "true"
      YACI_CACHE_TTL: 300
    command:
      - extract
      - postgres
      - ${GRPC_ENDPOINT}
      - -p
      - postgres://postgres:${POSTGRES_PASSWORD:-changeme}@postgres:5432/yaci
      - --live
      - --enable-prometheus
      - --batch-size
      - "100"
      - --workers
      - "8"
      - -k
      - -t
      - "6"
      - -l
      - info
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Explorer frontend with production build
  explorer:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_POSTGREST_URL: http://postgrest:3000
        NEXT_PUBLIC_CHAIN_NAME: ${CHAIN_NAME:-Cosmos}
        NEXT_PUBLIC_CHAIN_ID: ${CHAIN_ID:-cosmoshub-4}
    container_name: yaci-explorer
    environment:
      NODE_ENV: production
      # Redis cache configuration
      REDIS_URL: redis://redis:6379
      CACHE_TTL: 60
    ports:
      - "3000:3000"
    depends_on:
      - postgrest
      - redis
    restart: unless-stopped

  # Nginx reverse proxy with caching
  nginx:
    image: nginx:alpine
    container_name: yaci-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - explorer
      - postgrest
    restart: unless-stopped

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: yaci-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local

networks:
  default:
    name: yaci-network
    driver: bridge